{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{AppLoading}from'expo';import{Asset}from'expo-asset';import*as Font from'expo-font';import React,{useState}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{Ionicons}from'@expo/vector-icons';import AppNavigator from\"./navigation/AppNavigator\";export default function App(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoadingComplete=_useState2[0],setLoadingComplete=_useState2[1];if(!isLoadingComplete&&!props.skipLoadingScreen){return React.createElement(AppLoading,{startAsync:loadResourcesAsync,onError:handleLoadingError,onFinish:function onFinish(){return handleFinishLoading(setLoadingComplete);}});}else{return React.createElement(View,{style:styles.container},Platform.OS==='ios'&&React.createElement(StatusBar,{barStyle:\"default\"}),React.createElement(AppNavigator,null));}}function loadResourcesAsync(){return _regeneratorRuntime.async(function loadResourcesAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(Promise.all([Asset.loadAsync([require(\"./assets/images/robot-dev.png\"),require(\"./assets/images/robot-prod.png\")]),Font.loadAsync(_objectSpread({},Ionicons.font,{'space-mono':require(\"./assets/fonts/SpaceMono-Regular.ttf\"),'kanit':require(\"./assets/fonts/Kanit-Regular.ttf\"),'kanit-bold':require(\"./assets/fonts/Kanit-Bold.ttf\")}))]));case 2:case\"end\":return _context.stop();}}});}function handleLoadingError(error){console.warn(error);}function handleFinishLoading(setLoadingComplete){setLoadingComplete(true);}var styles=StyleSheet.create({container:{flex:1,backgroundColor:'#fff'}});","map":{"version":3,"sources":["D:/GitProject/PremiumReserve/App.js"],"names":["AppLoading","Asset","Font","React","useState","Ionicons","AppNavigator","App","props","isLoadingComplete","setLoadingComplete","skipLoadingScreen","loadResourcesAsync","handleLoadingError","handleFinishLoading","styles","container","Platform","OS","Promise","all","loadAsync","require","font","error","console","warn","StyleSheet","create","flex","backgroundColor"],"mappings":"48BAAA,OAASA,UAAT,KAA2B,MAA3B,CACA,OAASC,KAAT,KAAsB,YAAtB,CACA,MAAO,GAAKC,CAAAA,IAAZ,KAAsB,WAAtB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,C,kPAEA,OAASC,QAAT,KAAyB,oBAAzB,CAEA,MAAOC,CAAAA,YAAP,iCAEA,cAAe,SAASC,CAAAA,GAAT,CAAaC,KAAb,CAAoB,eACeJ,QAAQ,CAAC,KAAD,CADvB,wCAC1BK,iBAD0B,eACPC,kBADO,eAGjC,GAAI,CAACD,iBAAD,EAAsB,CAACD,KAAK,CAACG,iBAAjC,CAAoD,CAClD,MACE,qBAAC,UAAD,EACE,UAAU,CAAEC,kBADd,CAEE,OAAO,CAAEC,kBAFX,CAGE,QAAQ,CAAE,0BAAMC,CAAAA,mBAAmB,CAACJ,kBAAD,CAAzB,EAHZ,EADF,CAOD,CARD,IAQO,CACL,MACE,qBAAC,IAAD,EAAM,KAAK,CAAEK,MAAM,CAACC,SAApB,EACGC,QAAQ,CAACC,EAAT,GAAgB,KAAhB,EAAyB,oBAAC,SAAD,EAAW,QAAQ,CAAC,SAApB,EAD5B,CAEE,oBAAC,YAAD,MAFF,CADF,CAMD,CACF,CAED,QAAeN,CAAAA,kBAAf,gLACQO,OAAO,CAACC,GAAR,CAAY,CAChBnB,KAAK,CAACoB,SAAN,CAAgB,CACdC,OAAO,iCADO,CAEdA,OAAO,kCAFO,CAAhB,CADgB,CAKhBpB,IAAI,CAACmB,SAAL,kBAEKhB,QAAQ,CAACkB,IAFd,EAKE,aAAcD,OAAO,wCALvB,CAME,QAASA,OAAO,oCANlB,CAOE,aAAcA,OAAO,iCAPvB,GALgB,CAAZ,CADR,gDAkBA,QAAST,CAAAA,kBAAT,CAA4BW,KAA5B,CAAmC,CAGjCC,OAAO,CAACC,IAAR,CAAaF,KAAb,EACD,CAED,QAASV,CAAAA,mBAAT,CAA6BJ,kBAA7B,CAAiD,CAC/CA,kBAAkB,CAAC,IAAD,CAAlB,CACD,CAED,GAAMK,CAAAA,MAAM,CAAGY,UAAU,CAACC,MAAX,CAAkB,CAC/BZ,SAAS,CAAE,CACTa,IAAI,CAAE,CADG,CAETC,eAAe,CAAE,MAFR,CADoB,CAAlB,CAAf","sourcesContent":["import { AppLoading } from 'expo';\r\nimport { Asset } from 'expo-asset';\r\nimport * as Font from 'expo-font';\r\nimport React, { useState } from 'react';\r\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nimport AppNavigator from './navigation/AppNavigator';\r\n\r\nexport default function App(props) {\r\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\r\n\r\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={loadResourcesAsync}\r\n        onError={handleLoadingError}\r\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <View style={styles.container}>\r\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\r\n        <AppNavigator />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nasync function loadResourcesAsync() {\r\n  await Promise.all([\r\n    Asset.loadAsync([\r\n      require('./assets/images/robot-dev.png'),\r\n      require('./assets/images/robot-prod.png'),\r\n    ]),\r\n    Font.loadAsync({\r\n      // This is the font that we are using for our tab bar\r\n      ...Ionicons.font,\r\n      // We include SpaceMono because we use it in HomeScreen.js. Feel free to\r\n      // remove this if you are not using it in your app\r\n      'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\r\n      'kanit': require('./assets/fonts/Kanit-Regular.ttf'),\r\n      'kanit-bold': require('./assets/fonts/Kanit-Bold.ttf'),\r\n    }),\r\n  ]);\r\n}\r\n\r\nfunction handleLoadingError(error) {\r\n  // In this case, you might want to report the error to your error reporting\r\n  // service, for example Sentry\r\n  console.warn(error);\r\n}\r\n\r\nfunction handleFinishLoading(setLoadingComplete) {\r\n  setLoadingComplete(true);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}